# HG changeset patch
# User Honza Petrous <jpetrous@smartimp.cz>
# Date 1326226315 -3600
# Node ID c227c246838e9e03626fbb580b3856d050830951
# Parent  8c11d6963a3023200aeeb4a6dc06467c5e433545
Rework of command line parameter parsing. WARNING: incompatible changes!
Command line options:
    -d devs_list             : adapter[:frontend[:demux[:dvr]]] (default is 0:0:0:0)
    -g group_mask            : listen for group members requests only
    -v level                 : verbosity level (1:err,2:warn,3:info,4:debug)

diff -r 8c11d6963a30 -r c227c246838e vtunerd.c
--- a/vtunerd.c	Tue Jan 10 14:54:46 2012 +0100
+++ b/vtunerd.c	Tue Jan 10 21:11:55 2012 +0100
@@ -1,5 +1,6 @@
 #include <stdio.h>
 #include <stdlib.h>
+#include <unistd.h>
 #include <string.h>
 #include <fcntl.h>
 #include <pthread.h>
@@ -40,47 +41,86 @@
 }
 
 int main(int argc, char **argv) {
-	int i;
+	int i, c;
 	vtuner_session_t session[MAX_SESSIONS];
-	char *envdbg;
+	int hw_count = 0;
+	int tuner_group = VTUNER_GROUPS_ALL;
+	int opt_err = 0;
 
 	openlog("vtunerd", LOG_PERROR, LOG_USER);
 
-	write_message(MSG_MAIN, MSG_ALL, "vtuner server (vtunerd), part of vtuner project\n"
+	write_message(MSG_MAIN, MSG_ERROR, "vtuner server (vtunerd), part of vtuner project\n"
 			"Visit http://code.google.com/p/vtuner/ for more information\n"
 			"Copyright (C) 2009-11 Roland Mieslinger\n"
 			"This is free software; see the source for copying conditions.\n"
 			"There is NO warranty; not even for MERCHANTABILITY or FITNESS\n"
 			"FOR A PARTICULAR PURPOSE.\n");
 
-	if((envdbg = getenv("VTUNERD_DEBUG_LEVEL")))
-		sscanf(envdbg, "%i", &dbg_level);
+	// read only verbosity, to show value
+	while((c = getopt(argc, argv, "d:g:hl:p:u:v:")) != -1)
+		switch(c) {
+			case 'v': // verbosity
+			dbg_level = atoi(optarg);
+			break;
+		}
 
-	write_message(MSG_MAIN, MSG_ALL, "Revision:%s%s DVB:%d.%d allow:%d.x NetProto:%d MsgSize:%d, Debug:0x%x\n", BUILDVER, MODFLAG, DVB_API_VERSION, DVB_API_VERSION_MINOR, HAVE_DVB_API_VERSION, VTUNER_PROTO_MAX, sizeof(vtuner_net_message_t), dbg_level);
+	write_message(MSG_MAIN, MSG_ERROR, "Revision:%s%s DVB:%d.%d allow:%d.x NetProto:%d MsgSize:%d, Debug:0x%x\n", BUILDVER, MODFLAG, DVB_API_VERSION, DVB_API_VERSION_MINOR, HAVE_DVB_API_VERSION, VTUNER_PROTO_MAX, sizeof(vtuner_net_message_t), dbg_level);
 
 	for(i=0; i<MAX_SESSIONS; ++i) session[i].status = SST_IDLE;
 
-	int hw_count;
-	if(argc == 1) {
+	// do real option parsing now
+	optind = 1; // reset getopt()
+	while((c = getopt(argc, argv, "d:g:hl:p:u:v:")) != -1) {
+		switch(c) {
+			case 'd': // device list (adap:fe:dmx:dvr)
+				{
+					session[hw_count].frontend = 0;
+					session[hw_count].demux = 0;
+					session[hw_count].dvr = 0;
+					if(sscanf(optarg, "%d:%d:%d:%d", &session[hw_count].adapter, &session[hw_count].frontend, &session[hw_count].demux, &session[hw_count].dvr) < 1) {
+						WARN(MSG_MAIN, "Device parameter mismatch. At least adapter index is required\n");
+						opt_err++;
+						break;
+					}
+					DEBUGMAIN("register device: adapter %d, frontend %d, demux %d, dvr %d\n",
+						session[hw_count].adapter,session[hw_count].frontend,session[hw_count].demux,session[hw_count].dvr);
+					hw_count++;
+				}
+				break;
+
+			case 'v': // verbosity
+				break; // already set
+
+			case 'g': // tuner group
+				sscanf(optarg, "%i", &tuner_group);
+				break;
+
+			case 'l': // TODO: local ip
+			case 'p': // TODO: port
+			case 'u': // TODO: udp log
+				break;
+
+
+			case 'h': // help
+				write_message(MSG_MAIN, MSG_ERROR, "\nCommand line options:\n"
+					"    -d devs_list             : adapter[:frontend[:demux[:dvr]]] (default is 0:0:0:0)\n"
+					"    -g group_mask            : listen for group members requests only\n"
+					//"    -l ip_address            : listen on local ip address (default is on ALL)\n"
+					//"    -p port_number           : listen on local port (default is %d)\n"
+					//"    -u ip_address:port_number: send message log to udp://ip_address:port_number\n"
+					"    -v level                 : verbosity level (1:err,2:warn,3:info,4:debug)\n",
+					VTUNER_DISCOVER_PORT);
+				exit(1);
+				break;
+		}
+
+	}
+	if(!hw_count && !opt_err) {
 		session[0].adapter = 0;
 		session[0].frontend = 0;
 		session[0].demux = 0;
 		session[0].dvr = 0;
 		hw_count = 1;
-	} else {
-		hw_count=atoi(argv[1]);
-		if( hw_count*4 + 2 != argc ) {
-			ERROR(MSG_MAIN, "Parameter mismatch. %d tuner(s) requires %d arguments, but %d given.\n", hw_count, hw_count*4 + 1, argc-1);
-			exit(2);
-		}
-		for(i=0;i<hw_count;++i) {
-			session[i].adapter = atoi(argv[i*4+2]);
-			session[i].frontend = atoi(argv[i*4+3]);
-			session[i].demux = atoi(argv[i*4+4]);
-			session[i].dvr = atoi(argv[i*4+5]);
-			DEBUGMAIN("register hardware adapter %d, frontend %d, demux %d, dvr %d\n",\
-					session[i].adapter,session[i].frontend,session[i].demux,session[i].dvr);
-		}
 	}
 
 	#if DVB_API_VERSION >= 5
@@ -105,7 +145,7 @@
 	}
 
 	struct sockaddr_in client_so;
-	int tuner_type, tuner_group = -1, proto = -1;
+	int tuner_type, proto = -1;
 
 	while(fetch_request(&client_so, &proto, &tuner_type, &tuner_group)) {
 		INFO(MSG_MAIN, "received discover request proto%d, vtuner_type:%d group:0x%04X\n", proto, tuner_type, tuner_group);
