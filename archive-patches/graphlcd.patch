--- graphlcd-base/Make.config	2012-07-12 21:08:23.633218505 +0200
+++ graphlcd-base/Make.config.fix	2012-07-12 21:11:27.613219739 +0200
@@ -3,10 +3,10 @@
 
 ### The C compiler and options:
 
-CC       = gcc
+CC       = $(TARGET)gcc
 CFLAGS   = -O2
 
-CXX      = g++
+CXX      = $(TARGET)g++
 CXXFLAGS = -g -O2 -Wall -Woverloaded-virtual
 #CXXFLAGS = -g -ggdb -O0 -Wall -Woverloaded-virtual
 
@@ -24,10 +24,11 @@
 LIBDIR = $(DESTDIR)/lib
 INCDIR = $(DESTDIR)/include
 MANDIR = $(DESTDIR)/man
+ETCDIR = $(DESTDIR)/etc
 
 ### Includes and defines
 
-#INCLUDES += -I
+INCLUDES += -I$(DESTDIR)/include
 
 DEFINES += -D_GNU_SOURCE
 
@@ -40,4 +41,4 @@
 
 # uncomment this variable if you want to enable the experimental AX 206 based digital photo frame driver
 # Read DRIVER.ax206dpf before use!
-#HAVE_AX206DPF_EXPERIMENTAL=1
+HAVE_AX206DPF_EXPERIMENTAL=1
--- graphlcd-base/Makefile	2011-12-06 23:03:38.986910111 +0100
+++ graphlcd-base/Makefile.fix	2011-12-06 23:03:18.216901196 +0100
@@ -7,6 +7,7 @@
 ARCHIVE = $(PROJECT)-$(VERSION)
 PACKAGE = $(ARCHIVE)
 TMPDIR = /tmp
+include Make.config
 
 UDEVRULESDIR ?= /etc/udev/rules.d/
 UDEVRULE ?= 99-graphlcd-base.rules
@@ -24,7 +25,7 @@
 	@$(MAKE) -C glcddrivers install
 	@$(MAKE) -C glcdskin install
 	@$(MAKE) -C tools install
-	test -d "${UDEVRULESDIR}" && install -m 644 -o root -g root "$(UDEVRULE)" "$(UDEVRULESDIR)"
+	install -m 0644 graphlcd.conf $(ETCDIR)
 
 uninstall:
 	@$(MAKE) -C glcdgraphics uninstall
--- graphlcd-base/glcddrivers/port.c	2011-12-07 22:31:41.607561726 +0100
+++ graphlcd-base/glcddrivers/port.fix	2011-12-07 22:31:47.877565426 +0100
@@ -16,12 +16,35 @@
 #include <syslog.h>
 #include <unistd.h>
 #include <termios.h>
+#ifndef __sh__
 #include <sys/io.h>
+#endif
 #include <sys/ioctl.h>
 #include <linux/ppdev.h>
 #include <linux/parport.h>
 
+#ifdef __sh__
 
+/* konfetti: those are currently only dummy. not tested, not really
+ * thinking on it. it needs revise for the params etc. also we need
+ * to revise the assembler code below. but for now its ok because
+ * I (we) only want the peal lcd to be running ;)
+ */
+
+#define __NR_ioperm 101
+#define __NR_iopl 110
+
+static inline int ioperm(int port, unsigned long int from, unsigned long int num)
+{
+	return syscall(__NR_ioperm, port, from, num);
+}
+
+static inline int iopl(int level)
+{
+	return syscall(__NR_iopl, level);
+}
+
+#endif
 
 #include "port.h"
 
@@ -31,17 +54,21 @@
 static inline int port_in(int port)
 {
     unsigned char value;
+#ifndef __sh__
     __asm__ volatile ("inb %1,%0"
                       : "=a" (value)
                       : "d" ((unsigned short) port));
+#endif
     return value;
 }
 
 static inline void port_out(unsigned short int port, unsigned char val)
 {
+#ifndef __sh__
     __asm__ volatile ("outb %0,%1\n"
                       :
                       : "a" (val), "d" (port));
+#endif
 }
 
 cParallelPort::cParallelPort()
--- graphlcd-base/graphlcd.conf	2011-12-11 17:28:26.778505886 +0100
+++ graphlcd-base/graphlcd.conf.fix	2011-12-11 17:28:33.998507890 +0100
@@ -29,7 +29,7 @@
 #  Select the process priority that is used when sleeping.
 #  Possible values: -20 <= x <= 19
 #  Default value: 0
-WaitPriority=0
+WaitPriority=19
 
 # General driver settings
 #  This section lists the display settings that are parsed and
@@ -114,467 +114,7 @@
 #  A value of 0 completely disables complete refreshs. 
 #  Possible values: 0 <= x <= 50
 #  Default value: 5
-
-########################################################################
-
-[framebuffer]
-# framebuffer driver
-#  Output goes to a framebuffer device
-Driver=framebuffer
-
-#UpsideDown=no
-#Invert=no
-
-# Device
-#  Framebuffer device
-#  Default value: /dev/fb0
-#Device=/dev/fb0
-
-# Damage | ReportDamage
-#  Damage reporting for framebuffer devices with update problems
-#  Possible values: none, auto, udlfb, ugly
-#    none:  no damage reporting
-#    auto:  automatic determination if damage reporting is needed
-#    udlfb: damage reporting for udlfb-devices (displaylink)
-#    ugly:  dirty damagereporting (a '\n' is written to the framebuffer file handle)
-#  Default value: none
-#Damage=none
-
-# Zoom
-#  Determines if pixels should be drawn double sized.
-#  If zoom is set, the actual resolution will be halved (both width and height)
-#  e.g.: framebuffer has resolution 800x600: this driver will report a drawing area of 400x300
-#  Possible values: 0, 1
-#  Default value: 1
-Zoom=1
-
-########################################################################
-
-[gu140x32f]
-# gu140x32f driver
-#  This is an 8-bit driver module for Noritake GU140x32-F7806 VFD
-#  displays. The VFD is operating in it's 8 bit-mode connected to a
-#  single PC parallel port.
-#  Default size: 140 x 32
-Driver=gu140x32f
-
-Device=/dev/parport0
-#Port=0x378
-#Width=140
-#Height=32
-#UpsideDown=no
-#Invert=no
-#Brightness=100
-#AdjustTiming=0
-#RefreshDisplay=1
-
-# Wiring
-#  Select the type of wiring your display is connected with.
-#  Possible values: 'Standard', 'Windows'
-#  Default value: 'Standard'
-Wiring=Standard
-
-########################################################################
-
-[gu256x64-372]
-# gu256x64-372 driver
-#  This is an 8-bit driver module for Noritake GU256x64-372 VFD
-#  displays. The VFD is operating in it's 8 bit-mode connected to a
-#  single PC parallel port.
-#  Default size: 256 x 64
-Driver=gu256x64-372
-
-Device=/dev/parport0
-#Port=0x378
-#Width=256
-#Height=64
-#UpsideDown=no
-#Invert=no
-#Brightness=100
-#AdjustTiming=0
-#RefreshDisplay=1
-
-# Wiring
-#  Select the type of wiring your display is connected with.
-#  Possible values: 'Standard', 'Windows'
-#  Default value: 'Standard'
-Wiring=Standard
-
-########################################################################
-
-[gu256x64-3900]
-# gu256x64-3900 driver
-#  This is a driver module for Noritake GU256X64x-3900 VFD displays. The
-#  VFD is either operating in 8 bit-mode connected to a single PC
-#  parallel port or in serial mode connected to a single PC serial port.
-#  Default size: 256 x 64
-Driver=gu256x64-3900
-
-Device=/dev/parport0
-#Port=0x378
-#Width=256
-#Height=64
-#UpsideDown=no
-#Invert=no
-#Brightness=100
-#AdjustTiming=0
-#RefreshDisplay=1
-
-# Wiring
-#  Select the type of wiring your display is connected with.
-#  Possible values: 'Standard', 'Satyr'
-#  Default value: 'Standard'
-Wiring=Standard
-
-# Interface
-#  Select the interface your display is connnected to.
-#  Possible values: 'Parallel', 'Serial'
-#  Default value: 'Parallel'
-Interface=Parallel
-
-# DMA
-#  Enables/disables the usage of the controller's DMA mode which
-#  increases writing speed. This only works in parallel interface mode.
-#  Possible values: 'yes', 'no'
-#  Default value: 'yes'
-DMA=yes
-
-########################################################################
-
-[gu126x64D-K610A4]
-# GU126x64D-K610A4 driver
-#  This is a driver module for Noritake GU126x64D-K610A4 VFD displays. 
-#  The VFD is operating in 8 bit-mode connected to a single PC
-#  parallel port.
-#  Default size: 126 x 64
-Driver=gu126x64D-K610A4
-
-Device=/dev/parport0
-#Port=0x378
-#Width=126
-#Height=64
-#UpsideDown=no
-#Invert=no
-#Brightness=100
-#RefreshDisplay=1
-#AdjustTiming=30
-
-#  Debug some methods of the driver
-#  (add the values of interest)
-#
-#   1: show a log at the start of a refresh
-#   2: show a log at the end of a refresh with timing information
-#   4: show the rows (8 pixel) refreshed
-#   8: show every commands/bytes sent to the display
-#  16: log every unsuccessful waiting for display acknowledge
-#
-#Debug=0
-
-########################################################################
-
-[hd61830]
-# hd61830 driver
-#  This is a driver module for the Hitachi HD61830 LCD controller.
-#  Default size: 240 x 128
-Driver=hd61830
-
-Device=/dev/parport0
-#Port=0x378
-#Width=240
-#Height=128
-#UpsideDown=no
-#Invert=no
-#AdjustTiming=0
-#RefreshDisplay=1
-
-########################################################################
-
-[image]
-# image driver
-#  This is a driver module for writing image sequences in PBM (Portable
-#  Bit Map) format that show the plugin's output.
-#  Default size: 240 x 128
-Driver=image
-#Width=240
-#Height=128
-#UpsideDown=no
-#Invert=no
-
-########################################################################
-
-[ks0108]
-# ks0108 driver
-#  This is a driver module for the Samsung KS0108 LCD controller.
-#  Default size: 128 x 64
-Driver=ks0108
-
-Device=/dev/parport0
-#Port=0x378
-#Width=128
-#Height=64
-#UpsideDown=no
-#Invert=no
-#AdjustTiming=0
-#RefreshDisplay=1
-
-# Control
-#  Select the variant of triggering the display's control lines.
-#  Possible values: '0', '1'
-#  Default value: '1'
-Control=1
-
-########################################################################
-
-[sed1330]
-# sed1330 driver
-#  This is a driver module for the Epson SED1330/1335 LCD controller.
-#  Default size: 320 x 240
-Driver=sed1330
-
-Device=/dev/parport0
-#Port=0x378
-#Width=320
-#Height=240
-#UpsideDown=no
-#Invert=no
-#AdjustTiming=0
-#refreshDisplay=1
-
-# Wiring
-#  Select the type of wiring your display is connected with.
-#  Possible values: 'Original', 'PowerLCD', 'LCDProc', 'Tweakers',
-#                   'YASEDW'
-#  Default value: 'Original'
-Wiring=Original
-
-# OscillatorFrequency
-#  Select the frequency the oscillator on your LCD board uses in kHz.
-#  Possible values: 1000 <= x <= 15000)
-#  Default value: 9600
-OscillatorFrequency=9600
-
-# Interface
-#  Select the interface mode your display is connected with.
-#  Possible values: '6800', '8080'
-#  Default value: '6800'
-Interface=6800
-
-########################################################################
-
-[sed1520]
-# sed1520 driver
-#  This is a driver module for the Epson SED1520 LCD controller.
-#  Default size: 120 x 32
-Driver=sed1520
-
-Device=/dev/parport0
-#Port=0x378
-#Width=120
-#Height=32
-#UpsideDown=no
-#Invert=no
-#AdjustTiming=0
-#RefreshDisplay=1
-
-########################################################################
-
-[simlcd]
-# simlcd driver
-#  This is the SimLCD driver module. Output goes to a file instead of
-#  LCD. Use SimLCD tool to view this file.
-#  Default size: 240 x 128
-Driver=simlcd
-#Width=240
-#Height=128
-#UpsideDown=no
-#Invert=no
-
-########################################################################
-
-[t6963c]
-# t6963c driver
-#  This is a driver module for the Toshiba T6963C LCD controller.
-#  Default size: 240 x 128
-Driver=t6963c
-
-Device=/dev/parport0
-#Port=0x378
-#Width=240
-#Height=128
-#UpsideDown=no
-#Invert=no
-#RefreshDisplay=1
-
-# Wiring
-#  Select the type of wiring your display is connected with.
-#  Possible values: 'Standard', 'Windows', 'Serial'
-#  Default value: 'Standard'
-Wiring=Standard
-
-# FontSelect
-#  Select the font width your display uses for text mode. In most cases
-#  this is selectable through one of the pins of your LCD board
-#  Possible values: '6', '8'
-#  Default value: '6'
-FontSelect=6
-
-# AutoMode
-#  Enables or disables the usage of T6963C's auto mode which doubles
-#  writing speed when enabled.
-#  Possible values: 'yes', 'no'
-#  Default value: 'yes'
-AutoMode=yes
-
-# StatusCheck
-#  Enables or disables the usage of T6963C's status check. When using a
-#  shielded cable for connecting your display, the disabling may be
-#  possible. This results in doubling the speed of writing data to the
-#  LCD.
-#  Possible values: 'yes', 'no'
-#  Default value: 'yes'
-StatusCheck=yes
-
-########################################################################
-
-[serdisp]
-Driver=serdisp
-# Controller
-#  Select the serdisplib name of your display.
-#  Possible values: See README in serdisplib package or http://serdisplib.sourceforge.net
-#Controller=nokia7110
-#Controller=sed1335
-Controller=optrex323
-
-# Options
-#  Pass display specific options
-#  Possible values: See driver-specific hardware page at http://serdisplib.sourceforge.net
-#
-#  IMPORTANT: when using generic controllers like sed1330,sed1335,t6963c, width and height
-#             need to be set here (if different from default settings)!
-#             (serdisplib needs to be extended to be able to use 'Width' and 'Height'
-#              settings directly - this will be added later)
-#
-#Options=MODE=8080
-#Options=DELAY=2000;FONTWIDTH=8;CHECK=1
-#Options=WIDTH=128;HEIGHT=64
-#Options=WIDTH=128;HEIGHT=64;DELAY=2000;FONTWIDTH=8;CHECK=1
-
-# Wiring
-#  Select Wiring
-#  Possible values: See driver-specific hardware page at http://serdisplib.sourceforge.net
-#Wiring=1
-#Wiring=PowerLCD
-#Wiring=DATA8,CS:nAUTO,A0:INIT,WR:nSTRB,RD:nSELIN
-
-# FGColour
-#  Drawing colour for non-monochrome displays
-#  Possible values: 0xRRGGBB (eg.: 0xFF0000)
-#  Defaults to black (0x000000) if not set
-#FGColour=0x000000
-
-# BGColour
-#  Background colour for non-monochrome displays
-#  Possible values: 0xRRGGBB (eg.: 0x00FFFF)
-#  Defaults to white (0xFFFFFF) if not set
-#BGColour=0xFFFFFF
-
-Device=/dev/parport0
-#Port=0x378
-#UpsideDown=no
-#Invert=no
-Contrast=5
-Backlight=yes
-
-# Settings 'Width' and 'Height' are ignored at the moment. For generic controllers # (sed1330/1335, t6963) width and height need to be set using setting 'Options' (look above)
-##Width=240
-##Height=128
-
-########################################################################
-
-[noritake800]
-# noritake800 driver
-#  This is an 8-bit driver module for Noritake Noritake 800(A) series VFD
-#  displays. The VFD is operating in it's 8 bit-mode connected to a
-#  single PC parallel port.
-#  Default size: 128 x 64
-Driver=noritake800
-
-Device=/dev/parport0
-#Port=0x378
-Width=128
-Height=64
-#UpsideDown=no
-#Invert=no
-Brightness=50
-#AdjustTiming=0		# not used
-#RefreshDisplay=0	# not used
-
-# Wiring
-#  Select the type of wiring your display is connected with.
-#  Possible values: 'LiquidMp3', 'MZ'
-#  Default value: 'LiquidMp3'
-Wiring=LiquidMp3
-
-########################################################################
-
-[avrctl]
-# avrctl driver
-#  This is an driver module for my AVR controlled LCD display connected via
-#  USB port. It uses some simple commands to update the display content.
-#  Default size: 256 x 128
-Driver=avrctl
-Device=/dev/ttyUSB0
-Width=256
-Height=128
-#UpsideDown=no
-#Invert=no
-Brightness=50
-RefreshDisplay=1
-
-########################################################################
-
-[g15daemon]
-# pseudo device for the g15daemon meta driver
-# Output goes to the g15daemon which then displays it
-Driver=g15daemon
-Width=160
-Height=43
-
-########################################################################
-
-[network]
-# network driver
-#  Default size: 240 x 128
-Driver=network
-Width=256
-Height=128
-UpsideDown=no
-Invert=no
-Brightness=10
-RefreshDisplay=1
-
-########################################################################
-
-[dm140gink]
-#  dm140gink driver
-#  This is an driver module for Futaba DM140-GINK VFD displays.
-#  The VFD is built-in in some HTPC cases and connected to a
-#  USB port.
-#  Default size: 112 x 16
-Driver=dm140gink
-#Width=112
-#Height=16
-#UpsideDown=no
-
-# Invertion is not supported
-#Invert=no
-
-# USB VendorID and ProductID
-#Vendor=0x040b
-#Product=0x7001
-# USB ID activy 5xx:
-#Vendor=0x1509
-#Product=0x925d
+RefreshDisplay=50
 ########################################################################
 
 [ax206dpf]
@@ -588,8 +128,8 @@
 #
 #  Default size: 320 x 240 or 240 x 320 (see "Portrait")
 Driver=ax206dpf
-#Width=320
-#Height=240
+Width=320
+Height=240
 #
 # UpsideDown
 #  Rotates the display output by 180 degrees. This might be useful, if
--- graphlcd-base/tools/convpic/Makefile.org	2012-01-21 23:04:06.899524642 +0100
+++ graphlcd-base/tools/convpic/Makefile	2012-01-21 23:04:06.847524649 +0100
@@ -36,7 +36,7 @@ $(PRGNAME): $(OBJS)
 
 install: $(PRGNAME)
 	install -d $(BINDIR)
-	install -m 755 -o root -g root -s $(PRGNAME) $(BINDIR)
+	install -m 755 $(PRGNAME) $(BINDIR)
 
 uninstall:
 	rm -f $(BINDIR)/$(PRGNAME)
--- graphlcd-base/tools/crtfont/Makefile.org	2012-01-21 23:10:38.711524640 +0100
+++ graphlcd-base/tools/crtfont/Makefile	2012-01-21 23:10:38.663524640 +0100
@@ -35,7 +35,7 @@ $(PRGNAME): $(OBJS)
 
 install: $(PRGNAME)
 	install -d $(BINDIR)
-	install -m 755 -o root -g root -s $(PRGNAME) $(BINDIR)
+	install -m 755 $(PRGNAME) $(BINDIR)
 
 uninstall:
 	rm -f $(BINDIR)/$(PRGNAME)
--- graphlcd-base/tools/genfont/Makefile.org	2012-01-21 23:13:28.307524643 +0100
+++ graphlcd-base/tools/genfont/Makefile	2012-01-21 23:13:28.255524646 +0100
@@ -38,7 +38,7 @@ $(PRGNAME): $(OBJS)
 
 install: $(PRGNAME)
 	install -d $(BINDIR)
-	install -m 755 -o root -g root -s $(PRGNAME) $(BINDIR)
+	install -m 755 $(PRGNAME) $(BINDIR)
 	
 uninstall:
 	rm -f $(BINDIR)/$(PRGNAME)
--- graphlcd-base/tools/showpic/Makefile.org	2012-01-21 23:15:43.891524641 +0100
+++ graphlcd-base/tools/showpic/Makefile	2012-01-21 23:15:43.843524640 +0100
@@ -36,7 +36,7 @@ $(PRGNAME): $(OBJS)
 
 install: $(PRGNAME)
 	install -d $(BINDIR)
-	install -m 755 -o root -g root -s $(PRGNAME) $(BINDIR)
+	install -m 755 $(PRGNAME) $(BINDIR)
 
 uninstall:
 	rm -f $(BINDIR)/$(PRGNAME)
--- graphlcd-base/tools/showtext/Makefile.org	2012-01-21 23:18:13.715524639 +0100
+++ graphlcd-base/tools/showtext/Makefile	2012-01-21 23:18:13.667524641 +0100
@@ -36,7 +36,7 @@ $(PRGNAME): $(OBJS)
 
 install: $(PRGNAME)
 	install -d $(BINDIR)
-	install -m 755 -o root -g root -s $(PRGNAME) $(BINDIR)
+	install -m 755 $(PRGNAME) $(BINDIR)
 
 uninstall:
 	rm -f $(BINDIR)/$(PRGNAME)
--- graphlcd-base/tools/lcdtestpattern/Makefile.org	2012-01-21 23:19:57.715524641 +0100
+++ graphlcd-base/tools/lcdtestpattern/Makefile	2012-01-21 23:19:56.899524641 +0100
@@ -36,7 +36,7 @@ $(PRGNAME): $(OBJS)
 
 install: $(PRGNAME)
 	install -d $(BINDIR)
-	install -m 755 -o root -g root -s $(PRGNAME) $(BINDIR)
+	install -m 755 $(PRGNAME) $(BINDIR)
 
 uninstall:
 	rm -f $(BINDIR)/$(PRGNAME)
--- graphlcd-base/glcddrivers/ax206dpf.h	2012-03-11 18:58:39.000000000 +0100
+++ graphlcd-base/glcddrivers/ax206dpf.h	2012-10-06 18:50:16.332478678 +0200
@@ -53,10 +53,12 @@
     bool isPortrait;
     bool rotate90;
     bool flip;
+    bool justCleared;
     int minx, maxx;
     int miny, maxy;
     LIBDPF::DPFContext *dpfh;
     unsigned char * LCD;
+    unsigned char * PRE;
 } DISPLAYHANDLE;
 
 
--- graphlcd-base/glcddrivers/ax206dpf.c	2012-03-11 18:58:39.000000000 +0100
+++ graphlcd-base/glcddrivers/ax206dpf.c	2012-10-06 19:30:07.512771427 +0200
@@ -76,6 +76,8 @@
         dh[i]->address[0] = 0;
         dh[i]->dpfh = NULL;
         dh[i]->LCD = NULL;
+        dh[i]->PRE = NULL;
+	dh[i]->justCleared = false;
     }
 
     lastbrightness = config->brightness ? config->brightness : 100;
@@ -212,7 +214,7 @@
     {
         dh[di]->dpfh = NULL;
         dh[di]->attached = false;
-        return 0;
+        return error;
     }
     dh[di]->attached = true;
     struct usb_device *dev = usb_device(dh[di]->dpfh->dev.udev);
@@ -250,6 +252,7 @@
     }
     // setup physical lcd arrays
     dh[di]->LCD = (unsigned char *) malloc(dh[di]->dpfh->height * dh[di]->dpfh->width * dh[di]->dpfh->bpp);
+    dh[di]->PRE= (unsigned char *) malloc(dh[di]->dpfh->height * dh[di]->dpfh->width * dh[di]->dpfh->bpp);
     ClearSingleDisplay(di);
 
     // Set Display Brightness
@@ -257,7 +260,7 @@
 
 
     // Reorder displays
-    bool changed = false;
+//  bool changed = false;
     for (unsigned int i = 0; i < MAX_DPFS - 1; i++)
     {
         for (unsigned int j = i + 1; j < MAX_DPFS; j++)
@@ -267,7 +270,7 @@
                 DISPLAYHANDLE *h = dh[i];
                 dh[i] = dh[j];
                 dh[j] = h;
-                changed = true;
+//              changed = true;
             }
         }
     }
@@ -291,6 +294,10 @@
     if (dh[di]->LCD != NULL)
         free(dh[di]->LCD);
     dh[di]->LCD = NULL;
+
+    if (dh[di]->PRE != NULL)
+        free(dh[di]->PRE);
+    dh[di]->PRE = NULL;
     
     dh[di]->attached = false;
     dh[di]->address[0] = 0;
@@ -353,7 +360,9 @@
 {
     if (dh[di]->attached)
     {
+	dh[di]->justCleared = true;
         memset(dh[di]->LCD, 0, dh[di]->dpfh->width * dh[di]->dpfh->height * dh[di]->dpfh->bpp);       //Black
+        memset(dh[di]->PRE, 1, dh[di]->dpfh->width * dh[di]->dpfh->height * dh[di]->dpfh->bpp);       //whatever
         dh[di]->minx = 0;
         dh[di]->maxx = dh[di]->dpfh->width - 1;
         dh[di]->miny = 0;
@@ -479,7 +488,60 @@
         {
             dh[di]->minx = 0; dh[di]->miny = 0;
             dh[di]->maxx = dh[di]->dpfh->width - 1; dh[di]->maxy = dh[di]->dpfh->height - 1;
-        }
+        } else if (dh[di]->justCleared) {
+	    dh[di]->justCleared = false;
+
+	    int height = dh[di]->dpfh->height;
+	    int width =  dh[di]->dpfh->width;
+	    int y_min = height;
+
+	    uint16_t *b0 = (uint16_t *) dh[di]->LCD;
+	    uint16_t *b1 = (uint16_t *) dh[di]->PRE;
+	    for (int y = 0; y < height && y_min == height; y++)
+		for (int x = 0; x < width; x++, b0++, b1++)
+		    if (b0 != b1) {
+			y_min = y;
+			break;
+		    }
+
+	    int y_max = y_min;
+	    b1 = (uint16_t *) dh[di]->LCD + height * width - 1;
+	    b0 = (uint16_t *) dh[di]->PRE + height * width - 1;
+	    for (int y = height - 1; y_min < y && y_max == y_min; y--)
+		for (int x = 0; x < width; x++, b0--, b1--)
+		    if (b0 != b1) {
+			y_max = y;
+			break;
+		    }
+
+	    int x_min = width;
+	    for (int x = 0; x < width && x_min == width; x++) {
+	        b0 = (uint16_t *) dh[di]->LCD + x + y_min * width;
+	        b1 = (uint16_t *) dh[di]->PRE + x + y_min * width;
+	        for (int y = y_min; y < y_max; y++, b0 += width, b1 += width)
+		    if (*b0 != *b1) {
+			x_min = x;
+			break;
+		    }
+	    }
+
+	    int x_max = x_min;
+	    for (int x = width - 1; x_min < x && x_max == x_min; x--) {
+		b0 = (uint16_t *) dh[di]->LCD + x + y_min * width;
+		b1 = (uint16_t *) dh[di]->PRE + x + y_min * width;
+		for (int y = y_min; y < y_max; y++, b0 += width, b1 += width)
+		    if (*b0 != *b1) {
+			x_max = x;
+			break;
+		    }
+	    }
+
+	    dh[di]->minx;
+	    dh[di]->miny;
+	    dh[di]->minx = x_min;
+	    dh[di]->maxx = x_max;
+	}
+
         //fprintf(stderr, "%d: (%d,%d)-(%d,%d) ", di, dh[di]->minx, dh[di]->miny, dh[di]->maxx, dh[di]->maxy);
         if (dh[di]->minx > dh[di]->maxx || dh[di]->miny > dh[di]->maxy)
             continue;
@@ -506,6 +568,7 @@
             RescanUSB();
             lastscan = time(NULL);
         }
+	memcpy(dh[di]->PRE, dh[di]->LCD, dh[di]->dpfh->height * dh[di]->dpfh->width * dh[di]->dpfh->bpp);
     }
     
     ResetMinMax();
