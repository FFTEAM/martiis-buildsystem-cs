From 7e287e8e85293f3940cb3ef19276d057e16293fc Mon Sep 17 00:00:00 2001
From: Stefan Seyfried <seife@tuxbox-git.slipkontur.de>
Date: Sat, 18 Feb 2012 21:55:34 +0100
Subject: [PATCH 1/6] player2_191: silence kmsg spam

---
 .../drivers/media/dvb/stm/backend/player_module.c  |    1 +
 .../media/dvb/stm/dvb/e2_proc/e2_proc_audio.c      |   21 +++--
 .../media/dvb/stm/dvb/e2_proc/e2_proc_avs.c        |   40 +++++++++
 .../media/dvb/stm/dvb/e2_proc/e2_proc_video.c      |   95 ++++++++++++++++++++
 .../media/dvb/stm/dvb/e2_proc/e2_proc_vmpeg.c      |   83 +++++++++++++----
 .../linux/drivers/media/dvb/stm/dvb/st-pti.c       |   31 ++++---
 player2_191/linux/drivers/sound/kreplay/kreplay.c  |    3 +-
 .../linux/drivers/sound/ksound/ksound-core.c       |    6 +-
 player2_191/linux/drivers/sound/ksound/ktone.c     |    3 +-
 9 files changed, 247 insertions(+), 36 deletions(-)

diff --git a/player2_191/linux/drivers/media/dvb/stm/backend/player_module.c b/player2_191/linux/drivers/media/dvb/stm/backend/player_module.c
index 09513a8..a7cf6bf 100644
--- a/player2_191/linux/drivers/media/dvb/stm/backend/player_module.c
+++ b/player2_191/linux/drivers/media/dvb/stm/backend/player_module.c
@@ -153,6 +153,7 @@ static int __init PlayerLoadModule (void)
 {
 
     report_init ();
+    report_restricted_severity_levels(severity_fatal, severity_interrupt * 10);
 
     DisplayInit ();
     BackendInit ();
diff --git a/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_audio.c b/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_audio.c
index 9684302..135885b 100644
--- a/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_audio.c
+++ b/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_audio.c
@@ -94,7 +94,9 @@ int proc_audio_delay_bitstream_write(struct file *file, const char __user *buf,
 	char    *myString;
 	ssize_t  ret = -ENOMEM;
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (page)
@@ -118,7 +120,9 @@ int proc_audio_delay_bitstream_write(struct file *file, const char __user *buf,
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 		sscanf(myString, "%x", &delay);
 
 		if (delay != 0)
@@ -254,7 +258,9 @@ int proc_audio_j1_mute_write(struct file *file, const char __user *buf, unsigned
 	ssize_t ret = -ENOMEM;
 	unsigned int State;
 
+#ifdef VERY_VERBOSE
 	printk("%s %d - ", __FUNCTION__, (int) count);
+#endif
 	mutex_lock (&(ProcDeviceContext->DvbContext->Lock));
 
 	page = (char *)__get_free_page(GFP_KERNEL);
@@ -268,7 +274,9 @@ int proc_audio_j1_mute_write(struct file *file, const char __user *buf, unsigned
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 		sscanf(myString, "%d", &State);
 
 		if (State == 1) { //MUTE
@@ -415,8 +423,9 @@ int proc_audio_ac3_write(struct file *file, const char __user *buf, unsigned lon
 	char *myString;
 	ssize_t ret = -ENOMEM;
 
+#ifdef VERY_VERBOSE
 	printk("%s %d - ", __FUNCTION__, (int) count);
-
+#endif
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (page)
 	{
@@ -427,9 +436,9 @@ int proc_audio_ac3_write(struct file *file, const char __user *buf, unsigned lon
 		myString = (char *) kmalloc(count + 1, GFP_KERNEL);
 		strncpy(myString, page, count);
 		myString[count] = '\0';
-
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
-
+#endif
 		if (strncmp("passthrough", page, count - 1) == 0)
 		{
 			if(passthrough == 0)
@@ -504,8 +513,9 @@ out:
 int proc_audio_ac3_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s %d\n", __FUNCTION__, count);
-
+#endif
 	if (passthrough == 1)
 	{
 		len = sprintf(page, "passthrough\n");
@@ -521,8 +531,9 @@ int proc_audio_ac3_read (char *page, char **start, off_t off, int count, int *eo
 int proc_audio_ac3_choices_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s %d\n", __FUNCTION__, count);
-
+#endif
 	len = sprintf(page, "downmix passthrough\n");
 
 	return len;
diff --git a/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_avs.c b/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_avs.c
index c0530d6..a289a0a 100644
--- a/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_avs.c
+++ b/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_avs.c
@@ -122,7 +122,9 @@ int proc_avs_0_volume_write(struct file *file, const char __user *buf, unsigned
 	char *myString;
 	ssize_t ret = -ENOMEM;
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (page)
@@ -146,7 +148,9 @@ int proc_avs_0_volume_write(struct file *file, const char __user *buf, unsigned
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		sscanf(myString, "%d", &volume);
 
@@ -233,7 +237,9 @@ out:
 int proc_avs_0_volume_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	len = sprintf(page, "%d\n", current_e2_volume);
 
@@ -243,7 +249,9 @@ int proc_avs_0_volume_read (char *page, char **start, off_t off, int count, int
 int proc_avs_0_input_choices_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	len = sprintf(page, "encoder scart\n");
 	return len;
@@ -270,7 +278,9 @@ int proc_avs_0_input_write(struct file *file, const char __user *buf, unsigned l
 	outputConfig.caps |= STMFBIO_OUTPUT_CAPS_HDMI_CONFIG;
 #endif
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (page)
@@ -283,7 +293,9 @@ int proc_avs_0_input_write(struct file *file, const char __user *buf, unsigned l
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		if(!strncmp("encoder", myString, count - 1))
 		{
@@ -336,7 +348,9 @@ out:
 int proc_avs_0_input_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	if(current_input == ENCODER)
 		len = sprintf(page, "encoder\n");
@@ -353,7 +367,9 @@ int proc_avs_0_fb_write(struct file *file, const char __user *buf, unsigned long
 	ssize_t ret = -ENOMEM;
 	/* int result; */
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (page)
@@ -366,7 +382,9 @@ int proc_avs_0_fb_write(struct file *file, const char __user *buf, unsigned long
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 		kfree(myString);
 		//result = sscanf(page, "%3s %3s %3s %3s %3s", s1, s2, s3, s4, s5);
 	}
@@ -381,7 +399,9 @@ out:
 int proc_avs_0_fb_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	len = sprintf(page, "low\n");
 
@@ -394,7 +414,9 @@ int proc_avs_0_colorformat_write(struct file *file, const char __user *buf, unsi
 	char *myString;
 	ssize_t ret = -ENOMEM;
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (page)
@@ -416,7 +438,9 @@ int proc_avs_0_colorformat_write(struct file *file, const char __user *buf, unsi
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		sscanf(myString, "%d", &alpha);
 
@@ -558,7 +582,9 @@ int proc_avs_0_colorformat_read (char *page, char **start, off_t off, int count,
 
 	struct stmfbio_output_configuration outputConfig;
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s %d\n", __FUNCTION__, count);
+#endif
 
 	outputConfig.outputid = 1;
 
@@ -588,7 +614,9 @@ int proc_avs_0_colorformat_read (char *page, char **start, off_t off, int count,
 int proc_avs_0_colorformat_choices_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	len = sprintf(page, "rgb cvbs svideo yuv hdmi_rgb hdmi_yuv hdmi_422\n");
 
@@ -602,7 +630,9 @@ int proc_avs_0_sb_write(struct file *file, const char __user *buf, unsigned long
 	ssize_t ret = -ENOMEM;
 	/* int result; */
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (page)
@@ -615,7 +645,9 @@ int proc_avs_0_sb_write(struct file *file, const char __user *buf, unsigned long
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 		kfree(myString);
 		//result = sscanf(page, "%3s %3s %3s %3s %3s", s1, s2, s3, s4, s5);
 	}
@@ -630,7 +662,9 @@ out:
 int proc_avs_0_sb_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	len = sprintf(page, "auto\n");
 
@@ -644,7 +678,9 @@ int proc_avs_0_standby_write(struct file *file, const char __user *buf, unsigned
 	ssize_t ret = -ENOMEM;
 	/* int result; */
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (page)
@@ -657,7 +693,9 @@ int proc_avs_0_standby_write(struct file *file, const char __user *buf, unsigned
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		if (strncmp("on", page, count - 1) == 0)
 		{
@@ -685,7 +723,9 @@ out:
 int proc_avs_0_standby_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	if(current_standby == 0)
 		len = sprintf(page, "off\n");
diff --git a/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_video.c b/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_video.c
index 77ade07..0674ce1 100644
--- a/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_video.c
+++ b/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_video.c
@@ -532,6 +532,7 @@ int proc_video_aspect_write(struct file *file, const char __user *buf, unsigned
 	ssize_t ret = -ENOMEM;
 	/* int result; */
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
 
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,30)
@@ -539,6 +540,7 @@ int proc_video_aspect_write(struct file *file, const char __user *buf, unsigned
 #else
 	printk("%p, %p, %d, %p", ProcDeviceContext, ProcDeviceContext->DvbContext, ProcDeviceContext->DvbContext->Lock.count.counter, ProcDeviceContext->VideoStream);
 #endif
+#endif
 
 	mutex_lock (&(ProcDeviceContext->DvbContext->Lock));
 
@@ -556,7 +558,9 @@ int proc_video_aspect_write(struct file *file, const char __user *buf, unsigned
 
 		aspect_e2 = VIDEO_FORMAT_16_9;
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		if (strncmp("4:3", myString, count - 1) == 0)
 		{
@@ -594,7 +598,9 @@ out:
 int proc_video_aspect_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	if (aspect_e2 == VIDEO_FORMAT_4_3)
 	{
@@ -617,7 +623,9 @@ int proc_video_aspect_read (char *page, char **start, off_t off, int count, int
 int proc_video_aspect_choices_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	//we dont support any, whatever this is
 	//len = sprintf(page, "4:3 16:9 any\n");
@@ -633,7 +641,9 @@ int proc_video_policy_write(struct file *file, const char __user *buf, unsigned
 	ssize_t ret = -ENOMEM;
 	int result;
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	mutex_lock (&(ProcDeviceContext->DvbContext->Lock));
 
@@ -646,7 +656,9 @@ int proc_video_policy_write(struct file *file, const char __user *buf, unsigned
 		myString = (char *) kmalloc(count + 1, GFP_KERNEL);
 		strncpy(myString, page, count);
 		myString[count] = '\0';
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		if (strncmp("letterbox", myString, count - 1) == 0)
 		{
@@ -706,7 +718,9 @@ out:
 int proc_video_policy_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	if (policy_e2 == VIDEO_POL_LETTER_BOX)
 	{
@@ -731,7 +745,9 @@ int proc_video_policy_read (char *page, char **start, off_t off, int count, int
 int proc_video_policy_choices_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	len = sprintf(page, "letterbox panscan non bestfit\n");
 
@@ -749,7 +765,9 @@ int proc_video_videomode_write(struct file *file, const char __user *buf, unsign
 
 	char* myString = kmalloc(count + 1, GFP_KERNEL);
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	mutex_lock (&(ProcDeviceContext->DvbContext->Lock));
 
@@ -775,7 +793,9 @@ int proc_video_videomode_write(struct file *file, const char __user *buf, unsign
 		strncpy(myString, page, new_count);
 		myString[new_count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		//whithout -1 write a unsupportet string hangs the driver
 		for (vLoop = 0; vLoop < (sizeof(Options) / sizeof(struct Modes)) - 1; vLoop++)
@@ -829,7 +849,9 @@ int proc_video_videomode_write(struct file *file, const char __user *buf, unsign
 					if (isDisplayCreated(BACKEND_VIDEO_ID, ProcDeviceContext->Id))
 					{
 						createNew = 1;
+#ifdef VERY_VERBOSE
 						printk("delete display\n");
+#endif
 						DvbDisplayDelete (BACKEND_VIDEO_ID, ProcDeviceContext->Id);
 					}
 				}
@@ -859,7 +881,9 @@ int proc_video_videomode_write(struct file *file, const char __user *buf, unsign
 
 				if ((ProcDeviceContext != NULL) && (createNew == 1))
 				{
+#ifdef VERY_VERBOSE
 					printk("create new display\n");
+#endif
 					DisplayCreate (BACKEND_VIDEO_ID, ProcDeviceContext->Id);
 
 					VideoIoctlPlay(ProcDeviceContext);
@@ -871,8 +895,10 @@ int proc_video_videomode_write(struct file *file, const char __user *buf, unsign
 					{
 						printk("failed to set output window %d, %d, %d\n",  Options[modeToSet].xres,  Options[modeToSet].yres, err);
 					}
+#ifdef VERY_VERBOSE
 					else
 						printk("set output window to %d, %d ok\n",  Options[modeToSet].xres,  Options[modeToSet].yres);
+#endif
 				}
 			}
 			else
@@ -897,7 +923,9 @@ int proc_video_videomode_read (char *page, char **start, off_t off, int count, i
 	void *fb = NULL;
 	struct fb_info *info;
 
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	fb = stmfb_get_fbinfo_ptr(); /* cannot return a NULL pointer */
 
@@ -958,7 +986,9 @@ int proc_video_pal_h_start_write(struct file *file, const char __user *buf, unsi
 
 	char* myString = kmalloc(count + 1, GFP_KERNEL);
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	mutex_lock (&(ProcDeviceContext->DvbContext->Lock));
 
@@ -977,7 +1007,9 @@ int proc_video_pal_h_start_write(struct file *file, const char __user *buf, unsi
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		sscanf(myString, "%x", &value);
 
@@ -1001,7 +1033,9 @@ int proc_video_pal_h_start_write(struct file *file, const char __user *buf, unsi
 				if (isDisplayCreated(BACKEND_VIDEO_ID, ProcDeviceContext->Id))
 				{
 					createNew = 1;
+#ifdef VERY_VERBOSE
 					printk("delete display\n");
+#endif
 					DvbDisplayDelete (BACKEND_VIDEO_ID, ProcDeviceContext->Id);
 				}
 			}
@@ -1017,7 +1051,9 @@ int proc_video_pal_h_start_write(struct file *file, const char __user *buf, unsi
 
 			if ((ProcDeviceContext != NULL) && (createNew == 1))
 			{
+#ifdef VERY_VERBOSE
 				printk("create new display\n");
+#endif
 				DisplayCreate (BACKEND_VIDEO_ID, ProcDeviceContext->Id);
 
 				VideoIoctlPlay(ProcDeviceContext);
@@ -1029,8 +1065,10 @@ int proc_video_pal_h_start_write(struct file *file, const char __user *buf, unsi
 				{
 					printk("failed to set output window %d, %d, %d\n",  screen_info.xres,  screen_info.yres, err);
 				}
+#ifdef VERY_VERBOSE
 				else
 					printk("set output window to %d, %d ok\n",  screen_info.xres,  screen_info.yres);
+#endif
 			}
 		}
 		else
@@ -1057,7 +1095,9 @@ int proc_video_pal_h_end_write(struct file *file, const char __user *buf, unsign
 
 	char* myString = kmalloc(count + 1, GFP_KERNEL);
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	mutex_lock (&(ProcDeviceContext->DvbContext->Lock));
 
@@ -1076,7 +1116,9 @@ int proc_video_pal_h_end_write(struct file *file, const char __user *buf, unsign
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		sscanf(myString, "%x", &value);
 
@@ -1100,7 +1142,9 @@ int proc_video_pal_h_end_write(struct file *file, const char __user *buf, unsign
 				if (isDisplayCreated(BACKEND_VIDEO_ID, ProcDeviceContext->Id))
 				{
 					createNew = 1;
+#ifdef VERY_VERBOSE
 					printk("delete display\n");
+#endif
 					DvbDisplayDelete (BACKEND_VIDEO_ID, ProcDeviceContext->Id);
 				}
 			}
@@ -1116,7 +1160,9 @@ int proc_video_pal_h_end_write(struct file *file, const char __user *buf, unsign
 
 			if ((ProcDeviceContext != NULL) && (createNew == 1))
 			{
+#ifdef VERY_VERBOSE
 				printk("create new display\n");
+#endif
 				DisplayCreate (BACKEND_VIDEO_ID, ProcDeviceContext->Id);
 
 				VideoIoctlPlay(ProcDeviceContext);
@@ -1128,7 +1174,11 @@ int proc_video_pal_h_end_write(struct file *file, const char __user *buf, unsign
 				{
 					printk("failed to set output window %d, %d, %d\n",  screen_info.xres,  screen_info.yres, err);
 				} else
+#ifdef VERY_VERBOSE
 					printk("set output window to %d, %d ok\n",  screen_info.xres,  screen_info.yres);
+#else
+					;
+#endif
 			}
 		}
 		else
@@ -1155,7 +1205,9 @@ int proc_video_pal_v_start_write(struct file *file, const char __user *buf, unsi
 
 	char* myString = kmalloc(count + 1, GFP_KERNEL);
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	mutex_lock (&(ProcDeviceContext->DvbContext->Lock));
 
@@ -1174,7 +1226,9 @@ int proc_video_pal_v_start_write(struct file *file, const char __user *buf, unsi
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		sscanf(myString, "%x", &value);
 
@@ -1198,7 +1252,9 @@ int proc_video_pal_v_start_write(struct file *file, const char __user *buf, unsi
 				if (isDisplayCreated(BACKEND_VIDEO_ID, ProcDeviceContext->Id))
 				{
 					createNew = 1;
+#ifdef VERY_VERBOSE
 					printk("delete display\n");
+#endif
 					DvbDisplayDelete (BACKEND_VIDEO_ID, ProcDeviceContext->Id);
 				}
 			}
@@ -1214,7 +1270,9 @@ int proc_video_pal_v_start_write(struct file *file, const char __user *buf, unsi
 
 			if ((ProcDeviceContext != NULL) && (createNew == 1))
 			{
+#ifdef VERY_VERBOSE
 				printk("create new display\n");
+#endif
 				DisplayCreate (BACKEND_VIDEO_ID, ProcDeviceContext->Id);
 
 				VideoIoctlPlay(ProcDeviceContext);
@@ -1226,8 +1284,10 @@ int proc_video_pal_v_start_write(struct file *file, const char __user *buf, unsi
 				{
 					printk("failed to set output window %d, %d, %d\n",  screen_info.xres,  screen_info.yres, err);
 				}
+#ifdef VERY_VERBOSE
 				else
 					printk("set output window to %d, %d ok\n",  screen_info.xres,  screen_info.yres);
+#endif
 			}
 		}
 		else
@@ -1254,7 +1314,9 @@ int proc_video_pal_v_end_write(struct file *file, const char __user *buf, unsign
 
 	char* myString = kmalloc(count + 1, GFP_KERNEL);
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	mutex_lock (&(ProcDeviceContext->DvbContext->Lock));
 
@@ -1273,7 +1335,9 @@ int proc_video_pal_v_end_write(struct file *file, const char __user *buf, unsign
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		sscanf(myString, "%x", &value);
 
@@ -1297,7 +1361,9 @@ int proc_video_pal_v_end_write(struct file *file, const char __user *buf, unsign
 				if (isDisplayCreated(BACKEND_VIDEO_ID, ProcDeviceContext->Id))
 				{
 					createNew = 1;
+#ifdef VERY_VERBOSE
 					printk("delete display\n");
+#endif
 					DvbDisplayDelete (BACKEND_VIDEO_ID, ProcDeviceContext->Id);
 				}
 			}
@@ -1313,7 +1379,9 @@ int proc_video_pal_v_end_write(struct file *file, const char __user *buf, unsign
 
 			if ((ProcDeviceContext != NULL) && (createNew == 1))
 			{
+#ifdef VERY_VERBOSE
 				printk("create new display\n");
+#endif
 				DisplayCreate (BACKEND_VIDEO_ID, ProcDeviceContext->Id);
 
 				VideoIoctlPlay(ProcDeviceContext);
@@ -1325,8 +1393,10 @@ int proc_video_pal_v_end_write(struct file *file, const char __user *buf, unsign
 				{
 					printk("failed to set output window %d, %d, %d\n",  screen_info.xres,  screen_info.yres, err);
 				}
+#ifdef VERY_VERBOSE
 				else
 					printk("set output window to %d, %d ok\n",  screen_info.xres,  screen_info.yres);
+#endif
 			}
 		}
 		else
@@ -1349,7 +1419,9 @@ int proc_video_pal_h_start_read (char *page, char **start, off_t off, int count,
 	void *fb = NULL;
 	struct fb_info *info;
 
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	fb = stmfb_get_fbinfo_ptr(); /* cannot return a NULL pointer */
 
@@ -1370,7 +1442,9 @@ int proc_video_pal_h_end_read (char *page, char **start, off_t off, int count, i
 	void *fb = NULL;
 	struct fb_info *info;
 
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	fb = stmfb_get_fbinfo_ptr(); /* cannot return a NULL pointer */
 
@@ -1391,7 +1465,9 @@ int proc_video_pal_v_start_read (char *page, char **start, off_t off, int count,
 	void *fb = NULL;
 	struct fb_info *info;
 
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	fb = stmfb_get_fbinfo_ptr(); /* cannot return a NULL pointer */
 
@@ -1412,7 +1488,9 @@ int proc_video_pal_v_end_read (char *page, char **start, off_t off, int count, i
 	void *fb = NULL;
 	struct fb_info *info;
 
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	fb = stmfb_get_fbinfo_ptr(); /* cannot return a NULL pointer */
 
@@ -1433,7 +1511,9 @@ int proc_video_videomode_choices_write(struct file *file, const char __user *buf
 	ssize_t ret = -ENOMEM;
 	/* int result; */
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	mutex_lock (&(ProcDeviceContext->DvbContext->Lock));
 
@@ -1453,7 +1533,9 @@ int proc_video_videomode_choices_write(struct file *file, const char __user *buf
 int proc_video_videomode_choices_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s %d\n", __FUNCTION__, count);
+#endif
 #if defined(UFS912) || defined(SPARK) || defined (SPARK7162) || defined(ATEVIO7500) || defined(HS7810A) || defined(HS7110) || defined(WHITEBOX) || defined(UFS913) || defined(VITAMIN_HD5000)
 	len = sprintf(page, "pal 1080i50 720p50 576p50 576i50 1080i60 720p60 1080p24 1080p25 1080p30 1080p50 1080p59 1080p60 PC\n");
 #else
@@ -1470,7 +1552,9 @@ int proc_video_videomode_preferred_write(struct file *file, const char __user *b
 	ssize_t ret = -ENOMEM;
 	/* int result; */
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	mutex_lock (&(ProcDeviceContext->DvbContext->Lock));
 
@@ -1485,7 +1569,10 @@ int proc_video_videomode_preferred_write(struct file *file, const char __user *b
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
+
 		kfree(myString);
 	}
 out:
@@ -1498,7 +1585,9 @@ out:
 int proc_video_videomode_preferred_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	len = sprintf(page, "HDMI\n");
 
@@ -1512,7 +1601,9 @@ int proc_video_alpha_write(struct file *file, const char __user *buf, unsigned l
 	ssize_t ret = -ENOMEM;
 	/* int result; */
 
+#ifdef VERY_VERBOSE
 	printk("%s %ld - ", __FUNCTION__, count);
+#endif
 
 	page = (char *)__get_free_page(GFP_KERNEL);
 	if (page)
@@ -1531,7 +1622,9 @@ int proc_video_alpha_write(struct file *file, const char __user *buf, unsigned l
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 
 		sscanf(myString, "%d", &alpha);
 
@@ -1556,7 +1649,9 @@ out:
 int proc_video_alpha_read (char *page, char **start, off_t off, int count, int *eof, void *data_unused)
 {
 	int len = 0;
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 #if !defined(ADB_BOX)
 	struct stmfb_info *info = stmfb_get_fbinfo_ptr();
diff --git a/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_vmpeg.c b/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_vmpeg.c
index 59e716d..511e50f 100644
--- a/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_vmpeg.c
+++ b/player2_191/linux/drivers/media/dvb/stm/dvb/e2_proc/e2_proc_vmpeg.c
@@ -28,8 +28,9 @@ int proc_vmpeg_0_dst_left_write(struct file *file, const char __user *buf, unsig
 	struct fb_var_screeninfo screen_info;
 	char* myString = kmalloc(count + 1, GFP_KERNEL);
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
-
+#ifdef VERY_VERBOSE
 	printk("%s %d - ", __FUNCTION__, (unsigned int)count);
+#endif
 
 	fb = stmfb_get_fbinfo_ptr();
 
@@ -59,7 +60,9 @@ int proc_vmpeg_0_dst_left_write(struct file *file, const char __user *buf, unsig
 		strncpy(myString, page, count);
 		myString[count] = '\0';
 
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 		sscanf(myString, "%x", &value);
 
 		if(pContext != NULL)
@@ -69,8 +72,10 @@ int proc_vmpeg_0_dst_left_write(struct file *file, const char __user *buf, unsig
 			err = StreamGetOutputWindow(pContext->VideoStream, &l, &t, &w, &h);
 			if (err != 0)
 				printk("failed to get output window %d\n", err);
+#ifdef VERY_VERBOSE
 			else
 				printk("get output window to %d %d %d, %d ok\n", l, t, w, h);
+#endif
 
 			l = x*value/720;
 
@@ -78,8 +83,10 @@ int proc_vmpeg_0_dst_left_write(struct file *file, const char __user *buf, unsig
 
 			if (err != 0)
 				printk("failed to set output window %d\n", err);
+#ifdef VERY_VERBOSE
 			else
 				printk("set output window ok %d %d %d %d\n", l, t, w, h);
+#endif
 			mutex_unlock (&(pContext->DvbContext->Lock));
 		}
 
@@ -103,7 +110,9 @@ int proc_vmpeg_0_dst_left_read (char *page, char **start, off_t off, int count,
 	struct fb_var_screeninfo screen_info;
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
 
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	fb =  stmfb_get_fbinfo_ptr();
 
@@ -129,8 +138,10 @@ int proc_vmpeg_0_dst_left_read (char *page, char **start, off_t off, int count,
 		err = StreamGetOutputWindow(pContext->VideoStream, &l, &t, &w, &h);
 		if (err != 0)
 			printk("failed to get output window %d\n", err);
+#ifdef VERY_VERBOSE
 		else
 			printk("get output window to %d %d %d, %d ok\n", l, t, w, h);
+#endif
 
 		mutex_unlock (&(pContext->DvbContext->Lock));
 	}
@@ -149,9 +160,9 @@ int proc_vmpeg_0_dst_top_write(struct file *file, const char __user *buf, unsign
 	struct fb_var_screeninfo screen_info;
 	char* myString = kmalloc(count + 1, GFP_KERNEL);
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
-
+#ifdef VERY_VERBOSE
 	printk("%s %d - ", __FUNCTION__, (unsigned int)count);
-
+#endif
 	fb =  stmfb_get_fbinfo_ptr();
 
 	info = (struct fb_info*) fb;
@@ -178,8 +189,9 @@ int proc_vmpeg_0_dst_top_write(struct file *file, const char __user *buf, unsign
 
 		strncpy(myString, page, count);
 		myString[count] = '\0';
-
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 		sscanf(myString, "%x", &value);
 
 		if (pContext != NULL)
@@ -190,8 +202,10 @@ int proc_vmpeg_0_dst_top_write(struct file *file, const char __user *buf, unsign
 			err = StreamGetOutputWindow(pContext->VideoStream, &l, &t, &w, &h);
 			if (err != 0)
 				printk("failed to get output window %d\n", err);
+#ifdef VERY_VERBOSE
 			else
 				printk("get output window to %d %d %d, %d ok\n", l, t, w, h);
+#endif
 
 			t = y*value/576;
 
@@ -199,8 +213,10 @@ int proc_vmpeg_0_dst_top_write(struct file *file, const char __user *buf, unsign
 
 			if (err != 0)
 				printk("failed to set output window %d\n", err);
+#ifdef VERY_VERBOSE
 			else
 				printk("set output window ok %d %d %d %d\n", l, t, w, h);
+#endif
 			mutex_unlock (&(pContext->DvbContext->Lock));
 		}
 
@@ -223,9 +239,9 @@ int proc_vmpeg_0_dst_top_read (char *page, char **start, off_t off, int count, i
 	struct fb_info  *info;
 	struct fb_var_screeninfo screen_info;
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
-
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
-
+#endif
 	fb =  stmfb_get_fbinfo_ptr();
 
 	info = (struct fb_info*) fb;
@@ -250,8 +266,10 @@ int proc_vmpeg_0_dst_top_read (char *page, char **start, off_t off, int count, i
 		err = StreamGetOutputWindow(pContext->VideoStream, &l, &t, &w, &h);
 		if (err != 0)
 			printk("failed to get output window %d\n", err);
+#ifdef VERY_VERBOSE
 		else
 			printk("get output window to %d %d %d, %d ok\n", l, t, w, h);
+#endif
 
 		mutex_unlock (&(pContext->DvbContext->Lock));
 	}
@@ -271,9 +289,9 @@ int proc_vmpeg_0_dst_width_write(struct file *file, const char __user *buf, unsi
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
 
 	char* myString = kmalloc(count + 1, GFP_KERNEL);
-
+#ifdef VERY_VERBOSE
 	printk("%s %d - ", __FUNCTION__, (unsigned int)count);
-
+#endif
 	fb =  stmfb_get_fbinfo_ptr();
 
 	info = (struct fb_info*) fb;
@@ -300,8 +318,9 @@ int proc_vmpeg_0_dst_width_write(struct file *file, const char __user *buf, unsi
 
 		strncpy(myString, page, count);
 		myString[count] = '\0';
-
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 		sscanf(myString, "%x", &value);
 
 		if (pContext != NULL)
@@ -312,8 +331,10 @@ int proc_vmpeg_0_dst_width_write(struct file *file, const char __user *buf, unsi
 			err = StreamGetOutputWindow(pContext->VideoStream, &l, &t, &w, &h);
 			if (err != 0)
 				printk("failed to get output window %d\n", err);
+#ifdef VERY_VERBOSE
 			else
 				printk("get output window to %d %d %d, %d ok\n", l, t, w, h);
+#endif
 
 			w = x*value/720;
 
@@ -321,8 +342,10 @@ int proc_vmpeg_0_dst_width_write(struct file *file, const char __user *buf, unsi
 
 			if (err != 0)
 				printk("failed to set output window %d\n", err);
+#ifdef VERY_VERBOSE
 			else
 				printk("set output window ok %d %d %d %d\n", l, t, w, h);
+#endif
 			mutex_unlock (&(pContext->DvbContext->Lock));
 		}
 		
@@ -345,9 +368,9 @@ int proc_vmpeg_0_dst_width_read (char *page, char **start, off_t off, int count,
 	struct fb_info *info;
 	struct fb_var_screeninfo screen_info;
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
-
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
-
+#endif
 	fb =  stmfb_get_fbinfo_ptr();
 
 	info = (struct fb_info*) fb;
@@ -371,8 +394,10 @@ int proc_vmpeg_0_dst_width_read (char *page, char **start, off_t off, int count,
 		err = StreamGetOutputWindow(pContext->VideoStream, &l, &t, &w, &h);
 		if (err != 0)
 			printk("failed to get output window %d\n", err);
+#ifdef VERY_VERBOSE
 		else
 			printk("get output window to %d %d %d, %d ok\n", l, t, w, h);
+#endif
 
 		mutex_unlock (&(pContext->DvbContext->Lock));
 	}
@@ -393,9 +418,9 @@ int proc_vmpeg_0_dst_height_write(struct file *file, const char __user *buf, uns
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
 
 	char* myString = kmalloc(count + 1, GFP_KERNEL);
-
+#ifdef VERY_VERBOSE
 	printk("%s %d - ", __FUNCTION__, (unsigned int)count);
-
+#endif
 	fb =  stmfb_get_fbinfo_ptr();
 
 	info = (struct fb_info*) fb;
@@ -422,8 +447,9 @@ int proc_vmpeg_0_dst_height_write(struct file *file, const char __user *buf, uns
 
 		strncpy(myString, page, count);
 		myString[count] = '\0';
-
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 		sscanf(myString, "%x", &value);
 
 		if (pContext != NULL)
@@ -434,8 +460,10 @@ int proc_vmpeg_0_dst_height_write(struct file *file, const char __user *buf, uns
 			err = StreamGetOutputWindow(pContext->VideoStream, &l, &t, &w, &h);
 			if (err != 0)
 				printk("failed to get output window %d\n", err);
+#ifdef VERY_VERBOSE
 			else
 				printk("get output window to %d %d %d, %d ok\n", l, t, w, h);
+#endif
 
 			h = y * value/576;
 
@@ -443,8 +471,10 @@ int proc_vmpeg_0_dst_height_write(struct file *file, const char __user *buf, uns
 
 			if (err != 0)
 				printk("failed to set output window %d\n", err);
+#ifdef VERY_VERBOSE
 			else
 				printk("set output window ok %d %d %d %d\n", l, t, w, h);
+#endif
 			mutex_unlock (&(pContext->DvbContext->Lock));
 		}
 
@@ -467,8 +497,9 @@ int proc_vmpeg_0_dst_height_read (char *page, char **start, off_t off, int count
 	struct fb_info *info;
 	struct fb_var_screeninfo screen_info;
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
-
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	fb = stmfb_get_fbinfo_ptr();
 
@@ -494,8 +525,10 @@ int proc_vmpeg_0_dst_height_read (char *page, char **start, off_t off, int count
 		err = StreamGetOutputWindow(pContext->VideoStream, &l, &t, &w, &h);
 		if (err != 0)
 			printk("failed to get output window %d\n", err);
+#ifdef VERY_VERBOSE
 		else
 			printk("get output window to %d %d %d, %d ok\n", l, t, w, h);
+#endif
 
 		mutex_unlock (&(pContext->DvbContext->Lock));
 	}
@@ -509,7 +542,9 @@ int proc_vmpeg_0_yres_read (char *page, char **start, off_t off, int count, int
 	int len = 0;
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
 
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	if(pContext != NULL)
 	{
@@ -528,7 +563,9 @@ int proc_vmpeg_0_xres_read (char *page, char **start, off_t off, int count, int
 	int len = 0;
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
 
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	if(pContext != NULL)
 	{
@@ -547,7 +584,9 @@ int proc_vmpeg_0_framerate_read (char *page, char **start, off_t off, int count,
 	int len = 0;
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
 
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	if(pContext != NULL)
 	{
@@ -566,7 +605,9 @@ int proc_vmpeg_0_aspect_read (char *page, char **start, off_t off, int count, in
 	int len = 0;
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
 
+#ifdef VERY_VERBOSE
 	printk("%s\n", __FUNCTION__);
+#endif
 
 	if(pContext != NULL)
 	{
@@ -590,8 +631,9 @@ int proc_vmpeg_0_dst_all_write(struct file *file, const char __user *buf, unsign
 	struct fb_var_screeninfo screen_info;
 	char* myString = kmalloc(count + 1, GFP_KERNEL);
 	struct DeviceContext_s *pContext = (struct DeviceContext_s*)data;
-
+#ifdef VERY_VERBOSE
 	printk("%s %d - ", __FUNCTION__, (unsigned int)count);
+#endif
 
 	fb = stmfb_get_fbinfo_ptr();
 
@@ -621,11 +663,14 @@ int proc_vmpeg_0_dst_all_write(struct file *file, const char __user *buf, unsign
 
 		strncpy(myString, page, count);
 		myString[count] = '\0';
-
+#ifdef VERY_VERBOSE
 		printk("%s\n", myString);
+#endif
 		sscanf(myString, "%x %x %x %x", &l ,&t, &w, &h);
 
+#ifdef VERY_VERBOSE
 		printk("%x, %x, %x, %x\n", l, t, w, h);
+#endif
 
 		if (pContext != NULL)
 		{
@@ -636,14 +681,18 @@ int proc_vmpeg_0_dst_all_write(struct file *file, const char __user *buf, unsign
 			l = x*l/720;
 			t = y*t/576;
 
+#ifdef VERY_VERBOSE
 			printk("%x, %x, %x, %x\n", l, t, w, h);
+#endif
 
 			err = DvbStreamSetOutputWindow(pContext->VideoStream, l, t, w, h);
 
 			if (err != 0)
 				printk("failed to set output window %d\n", err);
+#ifdef VERY_VERBOSE
 			else
 				printk("set output window ok %d %d %d %d\n", l, t, w, h);
+#endif
 			mutex_unlock (&(pContext->DvbContext->Lock));
 		}
 		/* always return count to avoid endless loop */
diff --git a/player2_191/linux/drivers/media/dvb/stm/dvb/st-pti.c b/player2_191/linux/drivers/media/dvb/stm/dvb/st-pti.c
index 40aea88..aceed0c 100644
--- a/player2_191/linux/drivers/media/dvb/stm/dvb/st-pti.c
+++ b/player2_191/linux/drivers/media/dvb/stm/dvb/st-pti.c
@@ -130,10 +130,12 @@ int stpti_start_feed ( struct dvb_demux_feed *dvbdmxfeed,
     return -1;
 #endif
 
+
+#ifdef VERY_VERBOSE
   printk("start dmx %p, sh %d, pid %d, t %d, pt %d\n", demux,
                pSession->session, dvbdmxfeed->pid, dvbdmxfeed->type,
                dvbdmxfeed->pes_type );
-
+#endif
   switch ( dvbdmxfeed->type )
   {
   case DMX_TYPE_TS:
@@ -172,10 +174,12 @@ int stpti_start_feed ( struct dvb_demux_feed *dvbdmxfeed,
       return -EINVAL;
     }
   }
+#ifdef VERY_VERBOSE
   else
   {
     dprintk ( "type = %d \n",dvbdmxfeed->type );
   }
+#endif
 
   if (dvbdmxfeed->type == DMX_TYPE_SEC)
   	my_pes_type = 99;
@@ -205,13 +209,16 @@ int stpti_start_feed ( struct dvb_demux_feed *dvbdmxfeed,
 	       int err;
 	       if ((err = pti_hal_descrambler_link(pSession->session, pSession->descramblers[pSession->descramblerindex[vLoop]], pSession->slots[vLoop])) != 0)
 	         printk("Error linking slot %d to descrambler %d, err = %d\n", pSession->slots[vLoop], pSession->descramblers[pSession->descramblerindex[vLoop]], err);
+#ifdef VERY_VERBOSE
 	       else
              printk("linking slot %d to descrambler %d, session = %d type = %d\n", pSession->slots[vLoop], pSession->descramblers[pSession->descramblerindex[vLoop]], pSession->session, dvbdmxfeed->pes_type);
+#endif
 	     }
       }
-
+#ifdef VERY_VERBOSE
       printk ( "pid %d already collecting. references %d \n",
 	       dvbdmxfeed->pid , pSession->references[vLoop]);
+#endif
       return 0;
     }
   }
@@ -229,9 +236,9 @@ int stpti_start_feed ( struct dvb_demux_feed *dvbdmxfeed,
 							    pes_type, demux , NULL, NULL);
 
   pSession->descramblerindex[pSession->num_pids]= pSession->descramblerForPid[dvbdmxfeed->pid];
-
+#ifdef VERY_VERBOSE
   printk ( "SlotHandle = %d\n", pSession->slots[pSession->num_pids] );
-
+#endif
   if(pti_hal_slot_link_buffer ( pSession->session,
                              pSession->slots[pSession->num_pids],
 			     bufType) != 0)
@@ -257,8 +264,10 @@ int stpti_start_feed ( struct dvb_demux_feed *dvbdmxfeed,
 	      printk("Error linking slot %d to descrambler %d, err = %d\n",
                 pSession->slots[pSession->num_pids],
                 pSession->descramblers[pSession->descramblerindex[pSession->num_pids]], err);
+#ifdef VERY_VERBOSE
      else
           printk("linking slot %d to descrambler %d, session = %d type=%d\n", pSession->slots[pSession->num_pids], pSession->descramblers[pSession->descramblerindex[pSession->num_pids]], pSession->session, dvbdmxfeed->pes_type);
+#endif
     }
   }
 
@@ -273,7 +282,7 @@ int stpti_start_feed ( struct dvb_demux_feed *dvbdmxfeed,
   dprintk ( "%s: pid = %d, num_pids = %d \n", __FUNCTION__, dvbdmxfeed->pid,
 	   pSession->num_pids );
 
-#if 0
+#ifdef VERY_VERBOSE
   printk ( "#  pid t pt ref\n");
   for ( vLoop = 0; vLoop < ( pSession->num_pids ); vLoop++ )
   {
@@ -316,7 +325,9 @@ int stpti_stop_feed ( struct dvb_demux_feed *dvbdmxfeed,
     return -1;
 #endif
 
+#ifdef VERY_VERBOSE
   printk ( "stop sh %d, pid %d, pt %d\n", pSession->session, dvbdmxfeed->pid, dvbdmxfeed->pes_type);
+#endif
   //printk ( "%s(): demux = %p, context = %p, sesison = %p, pid = %d, type = %d, pes_type = %d>", __FUNCTION__, dvbdmxfeed->demux, pContext, pSession, dvbdmxfeed->pid, dvbdmxfeed->type, dvbdmxfeed->pes_type );
 
   if (dvbdmxfeed->type == DMX_TYPE_SEC)
@@ -332,9 +343,9 @@ int stpti_stop_feed ( struct dvb_demux_feed *dvbdmxfeed,
     if (( pSession->pidtable[vLoop] == dvbdmxfeed->pid ) )
     {
       pSession->references[vLoop]--;
-
+#ifdef VERY_VERBOSE
       printk("Reference = %d\n", pSession->references[vLoop]);
-
+#endif
       haveFound = 1;
 
       if (pSession->references[vLoop] == 0)
@@ -365,7 +376,7 @@ int stpti_stop_feed ( struct dvb_demux_feed *dvbdmxfeed,
 
 	pSession->num_pids--;
 
-#if 0
+#ifdef VERY_VERBOSE
 	if(dvbdmxfeed->pes_type == DMX_TS_PES_VIDEO)
 	{
           /* reset the DMA threshold to 1 to allow low rate TS
@@ -609,9 +620,9 @@ int SetSource (struct dmx_demux* demux, const dmx_source_t *src)
            __func__, pContext, pContext->pPtiSession, src);
     return -EINVAL;
   }
-
+#ifdef VERY_VERBOSE
   printk("SetSource(%p, %d)\n", pDvbDemux, *src);
-
+#endif
   pContext->pPtiSession->source = *src;
 
   if (((*src >= DMX_SOURCE_FRONT0) && (*src <= DMX_SOURCE_FRONT3)) || (*src == DMX_SOURCE_DVR0))
diff --git a/player2_191/linux/drivers/sound/kreplay/kreplay.c b/player2_191/linux/drivers/sound/kreplay/kreplay.c
index fcdc7d8..aadd73b 100644
--- a/player2_191/linux/drivers/sound/kreplay/kreplay.c
+++ b/player2_191/linux/drivers/sound/kreplay/kreplay.c
@@ -234,8 +234,9 @@ static int __init kreplay_module_init(void)
 		printk("Failed to spawn kthread\n");
 		return PTR_ERR(kreplay_kthread);
 	}
-
+#ifdef VERY_VERBOSE
 	printk(KERN_DEBUG "kreplay: Built %s %s\n", __DATE__, __TIME__);
+#endif
 	return 0;
 }
 
diff --git a/player2_191/linux/drivers/sound/ksound/ksound-core.c b/player2_191/linux/drivers/sound/ksound/ksound-core.c
index 93f31c5..337caab 100644
--- a/player2_191/linux/drivers/sound/ksound/ksound-core.c
+++ b/player2_191/linux/drivers/sound/ksound/ksound-core.c
@@ -1232,9 +1232,9 @@ static int _ksnd_pcm_write_transfer(snd_pcm_substream_t *substream,
 	char *buf = (char *) data + samples_to_bytes(runtime, off*srcchannels);
 	char *uncachedbuf = ioremap_nocache(runtime->dma_addr, runtime->dma_bytes);
 	char *hwbuf = uncachedbuf + frames_to_bytes(runtime, hwoff);
-
+#ifdef VERY_VERBOSE
 	printk("offset %d base %p samples %p\n", hwoff, uncachedbuf, hwbuf);
-
+#endif
 	if (srcchannels == runtime->channels) {
 		memcpy(hwbuf, buf, frames_to_bytes(runtime, frames));
 	} else {
@@ -2041,7 +2041,9 @@ int ksnd_hctl_elem_write(snd_kcontrol_t *elem, snd_ctl_elem_value_t *control)
 
 static int __init ksnd_module_init(void)
 {
+#ifdef VERY_VERBOSE
 	printk(KERN_DEBUG "ksound: Built %s %s\n", __DATE__, __TIME__);
+#endif
 	return 0;
 }
 
diff --git a/player2_191/linux/drivers/sound/ksound/ktone.c b/player2_191/linux/drivers/sound/ksound/ktone.c
index ccd9378..26923d9 100644
--- a/player2_191/linux/drivers/sound/ksound/ktone.c
+++ b/player2_191/linux/drivers/sound/ksound/ktone.c
@@ -225,8 +225,9 @@ int __init ktone_module_init(void)
 		printk("Failed to spawn kthread\n");
 		return PTR_ERR(ktone_kthread);
 	}
-
+#ifdef VERY_VERBOSE
 	printk(KERN_DEBUG "ktone: Built %s %s\n", __DATE__, __TIME__);
+#endif
 	return 0;
 }
 
-- 
1.7.10.4

