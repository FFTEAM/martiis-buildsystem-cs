#!/bin/busybox sh


FILE=/mnt/root/sbin/init

MINIME=false
APPEND=""

mkdev() {
	# 249 mum0
	local MAJ=$(sed -n "/ $1/{s/ .*//;p}" /proc/devices)
	mknod /dev/$1 c $MAJ 0
	chmod 0660 /dev/$1
}

blink() {
	local A=0;
	while echo $A > /proc/led; do
		usleep 500000
		A=$(((A+1)%2))
	done
}

rescue_shell() {
    echo "Something went wrong. Dropping you to a shell." 
    # minime driver crashes on startrescue
    if $MINIME; then
	blink &
    else
	echo "1" > /proc/startrescue &
    fi
     # telnetd requires devpts
    mkdir -p /dev/pts
    mount -t devpts devpts /dev/pts

    ifconfig eth0 up

    if [ -f "/boot/.rescue.tmp" ]; then	
    tIP=`cat /boot/.rescue.tmp`    
    rm -f /boot/.rescue.tmp
    ifconfig eth0 add $tIP netmask 255.255.255.0    
    else
    udhcpc -b -t 15 -q -s /bin/simple.script
    fi

    /usr/sbin/telnetd
    /usr/sbin/vsftpd /etc/vsftpd.conf & 

    OS=`uname`
	IO="" # store IP
	case $OS in
	   Linux) IP=`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 `;;

	   *) IP="Unknown";;
	esac


    echo "" > /proc/vfd
    echo ${IP% *} > /proc/vfd
    /usr/bin/webinterface
    exec /bin/sh
 
    
}


# Mount the /proc and /sys filesystems.
mount -t proc proc /proc
mount -t sysfs sys /sys
KVER=$(uname -r)

export MRUAFW_PACKAGE_DIR=/lib/modules/$KVER/kernel/drivers/xload-38x
export EM8XXX_SERVER=":0"

if grep "SMP8XXX Chip ID.*8653" /proc/cpuinfo; then
	MINIME=true
	mv /usr/bin/webinterfaceminime /usr/bin/webinterface
	cd /lib/modules/$KVER/kernel/drivers
	ln -sf nand_wrminime.ko nand_wr.ko
	cd /
	APPEND=minime
fi
#Create device nodes

mdev -s
rescue_file=0;
selected_boot=0;

#mknod /dev/mum0 c 126 0
#mknod /dev/em8xxx0 c 127 0
mknod /dev/micom c 75 0

insmod /lib/modules/$KVER/kernel/drivers/hook.ko
insmod /lib/modules/$KVER/kernel/drivers/scsi_wait_scan.ko
insmod /lib/modules/$KVER/kernel/drivers/irvfd${APPEND}.ko
insmod /lib/modules/$KVER/kernel/drivers/llad.ko
mkdev mum0
DA=$(rmmalloc 0 2340777)
xkc xload 0xcafebbbb $MRUAFW_PACKAGE_DIR/video_*.xload $DA 0
if $MINIME; then
xkc xload 0xcafeaaaa $MRUAFW_PACKAGE_DIR/audio_*_dts52.xload $DA 0
else
xkc xload 0xcafeaaaa $MRUAFW_PACKAGE_DIR/audio_*_dts54.xload $DA 0
fi
xkc xload 0xcafedddd $MRUAFW_PACKAGE_DIR/demux*.xload $DA 0
xkc ustart 0xcafedddd d
xkc ustart 0xcafedddd D
xkc ustart 0xcafebbbb v
xkc ustart 0xcafeaaaa a
rmfree 0 $DA
xkc xload 0xcafe0105 $MRUAFW_PACKAGE_DIR/ios.bin*.xload
insmod /lib/modules/$KVER/kernel/drivers/em8xxx.ko
mkdev em8xxx0

mknod /dev/nblock3 b 254 3
mknod /dev/nblock4 b 254 4
mknod /dev/nblock5 b 254 5
mknod /dev/nblock6 b 254 6

chmod a+rw /dev/nblock3
chmod a+rw /dev/nblock4
chmod a+rw /dev/nblock5
chmod a+rw /dev/nblock6

insmod /lib/modules/$KVER/kernel/drivers/smp8xxx_nand.ko
insmod /lib/modules/$KVER/kernel/drivers/nand_wr.ko

HDMI_CHIP=""
UPD_SLEEP=1
if $MINIME; then
	HDMI_CHIP="-hdmi_chip SLi13"
	UPD_SLEEP=5
fi

if [ -d "/proc/scsi/usb-storage/" ]; then

        echo "" > /proc/vfd
	echo "USB CHECK!" > /proc/vfd
	sleep 1;
        echo "" > /proc/vfd
	echo "RESCUE MODE?" > /proc/vfd
	sleep 4;

	fdisk -l | grep '^/dev/sd'
	if [ $? = 0 ] ; then
		mount -t vfat /dev/sda1 /mnt/root		
		if [ $? = 0 ] ; then		
		   if [ -f "/mnt/root/update.ext" ]; then
			  tar -xf /mnt/root/update.ext -C /mnt/root/
			  export LD_LIBRARY_PATH=/mnt/root/update/lib:$LD_LIBRARY_PATH
			  /mnt/root/update/example_display -o hdmi cav cvbs -hdcav $HDMI_CHIP -hdmi_rx f -hdmi 1 -hdmi_reset_gpio 14 -audio_engine 0 -sf 48000 &
			  sleep $UPD_SLEEP;
			  /mnt/root/update/gui_update &
			  rescue_shell	
		   else 
			  umount /mnt/root
			  rescue_file=1;								
		    fi
		fi						
		
		if [ $rescue_file -eq 0 ]; then
		  mount -t vfat /dev/sda /mnt/root		
		   if [ $? = 0 ] ; then
			 if [ -f "/mnt/root/update.ext" ]; then
			  tar -xf /mnt/root/update.ext -C /mnt/root/
			  export LD_LIBRARY_PATH=/mnt/root/update/lib:$LD_LIBRARY_PATH
			  /mnt/root/update/example_display -o hdmi cav cvbs -hdcav $HDMI_CHIP -hdmi_rx f -hdmi 1 -hdmi_reset_gpio 14 -audio_engine 0 -sf 48000 &
			  sleep $UPD_SLEEP;
			  /mnt/root/update/gui_update &
			  rescue_shell		
			else 
			  umount /mnt/root
			  rescue_file=1;								
			fi
		   fi	
		fi

		if [ $rescue_file -eq 0 ]; then
		 mount -t vfat /dev/sdb1 /mnt/root		
		   if [ $? = 0 ] ; then
			 if [ -f "/mnt/root/update.ext" ]; then
			  tar -xf /mnt/root/update.ext -C /mnt/root/
			  export LD_LIBRARY_PATH=/mnt/root/update/lib:$LD_LIBRARY_PATH
			  /mnt/root/update/example_display -o hdmi cav cvbs -hdcav $HDMI_CHIP -hdmi_rx f -hdmi 1 -hdmi_reset_gpio 14 -audio_engine 0 -sf 48000 &
			  sleep $UPD_SLEEP;
			  /mnt/root/update/gui_update &
			  rescue_shell				
			else 
			  umount /mnt/root
			  rescue_file=1;								
			fi
		   fi	
		fi

		if [ $rescue_file -eq 0 ]; then
		 mount -t vfat /dev/sdb /mnt/root		
		   if [ $? = 0 ] ; then
			 if [ -f "/mnt/root/update.ext" ]; then
			  tar -xf /mnt/root/update.ext -C /mnt/root/
			  export LD_LIBRARY_PATH=/mnt/root/update/lib:$LD_LIBRARY_PATH
			  /mnt/root/update/example_display -o hdmi cav cvbs -hdcav $HDMI_CHIP -hdmi_rx f -hdmi 1 -hdmi_reset_gpio 14 -audio_engine 0 -sf 48000 &
			  sleep $UPD_SLEEP;
			  /mnt/root/update/gui_update &
			  rescue_shell			
			else 
			  umount /mnt/root
			  							
			fi
		   fi	
		fi

	fi

echo "" > /proc/vfd	
fi



echo "" > /proc/vfd
echo "CHK BOOT SEL" > /proc/vfd
echo 2 > /proc/led # red

mount -t jffs2 mtd2 /mnt/root

if [ $? = 0 ] ; then
  if [ -f "/mnt/root/.boot" ]; then							
	selected_boot=`cat /mnt/root/.boot`
  else 
	echo "0" > /mnt/root/.boot
  fi
fi


modesel=`cat /proc/rescue`
echo 1 > /proc/led # blue

if [ "$modesel" -ne 255 ]; then	
	keypressed=true
else
	keypressed=false
fi
if $keypressed; then
	if [ "$modesel" -ne 1 ]; then	
		echo $modesel > /mnt/root/.boot
	else
		if [ "$modesel" -ne 1 ]; then	
		  modesel=$selected_boot;
		fi
	fi
else 	
    modesel=$selected_boot;
fi

umount /mnt/root

### first try USB, but only if no boot requested by RC...
if ! $keypressed; then
	for disk in sdb sdb1 sda sda1; do
		echo "try $disk" > /proc/vfd
		echo "===================> trying to boot from /dev/$disk"
		# Mount the root filesystem on USB1.
		mount -o rw /dev/$disk /mnt/root
		if [ $? = 0 ]; then
			if [ -e /mnt/root/noboot ]; then
				echo "===================> noboot file exists, not booting"
				umount /mnt/root
				continue
			fi
			if [ -L "/mnt/root/sbin/init" ]; then
				# Unmount all other mounts so that the ram used by
				# the initramfs can be cleared after switch_root
				rmmod scsi_wait_scan
				rmmod em8xxx
				rmmod llad
				umount /sys /proc
				# Switch to the new root and execute init
				exec switch_root /mnt/root /sbin/init
			elif [ -f "/mnt/root/kexec" ]; then
				# TODO: check how this kexec stuff is supposed to work...
				/mnt/root/kexec -l /mnt/root/vmlinux
				/mnt/root/kexec -e &
			fi
			umount /mnt/root
		fi
	done
fi

if [ $modesel = 1 ] ; then
  echo "VOL+ RESCUE" > /proc/vfd
  rescue_shell	
elif [ $modesel = 2 ] ; then
   echo "" > /proc/vfd
   echo "BOOT [1]" > /proc/vfd
   echo "===================> BOOT 1"
elif [ $modesel = 3 ] ; then
   echo "" > /proc/vfd
   echo "BOOT [2]" > /proc/vfd
   echo "===================> BOOT 2"
elif  [ $modesel = 0 ] ; then
   echo "" > /proc/vfd
   echo "BOOT [0]" > /proc/vfd
   echo "===================> BOOT 0"
fi

# Do your stuff here.
echo "Mounting rootfs and booting ..."

# Mount the root filesystem.
R2=mtd5
if $MINIME; then
	R2=mtd4
fi

if [ $modesel = 2 ] ; then
   mount -t jffs2 $R2 /mnt/root -orw
elif [ $modesel = 3 ] ; then
   mount -t jffs2 mtd7 /mnt/root -orw
elif  [ $modesel = 0 ] ; then
   mount -t jffs2 mtd3 /mnt/root -orw
fi

if [ $? = 0 ] 
	then
     if [ -L "/mnt/root/sbin/init" ]
	 then

	rmmod scsi_wait_scan
	rmmod em8xxx
	rmmod llad

	umount /sys /proc
	sleep 1;

	#Switch to the new root and execute init
	exec switch_root /mnt/root /sbin/init

  fi
 umount /mnt/root
fi


rescue_shell




